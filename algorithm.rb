require './algorithm_table'

t = AlgorithmTable.new

# To find alternative algorithms, see
# http://algdb.net/puzzle/333/

# Put your algorithms here.
#   Non-LL algorithms will be reported
# Lowercase moves can be either whole cube rotations or double layer turns.
#   See config.rb for choices.
# You can put extra spaces, parans, or hyphens.
#   Note: Parens won't be expanded: i.e.  (URU'R')2 doesn't work as you expect.

# Code should be unique (used in png filename)
#     code, occurs,  algorithm
t.add("o1", "2/216", "BU2B2RBR'U2B'RBR'")
t.add("o2", "4/216", "FwURU'R'S'URU'R'F'")
t.add("o3", "4/216", "FURU'R'F'RBUB'U'R'")
t.add("o4", "4/216", "FURU'R'F'LFUF'U'L'")
t.add("o5", "4/216", "R'F2LFL'FR")
t.add("o6", "4/216", "LF2R'F'RF'L'")
t.add("o7", "4/216", "FRB'RBR2F'")
t.add("o8", "4/216", "B'R'FR'F'R2B")
t.add("o9", "4/216", "B'U'BRB'R'URBR'")
t.add("o10", "4/216", "RUR'-u-R'FRU'R'F'R")
t.add("o11", "4/216", "M'LUL'ULU2L'URL'")
t.add("o12", "4/216", "M'R'U'RU'R'U2'RU'L'R")
t.add("o13", "4/216", "RB'R'U'RBR'B'UB")
t.add("o14", "4/216", "R'FRUR'F'R-u'-RU'R'")
t.add("o15", "4/216", "RBR'F'RUB'U'R'F")
t.add("o16", "4/216", "L'B'LFL'U'BULF'")
t.add("o17", "4/216", "RB'R'BU2BU'LU'L'B'")
t.add("o18", "4/216", "FRUR'UF'U2'F'LFL'")
t.add("o19", "4/216", "FU2F'L'B'UR'U2RBL")
t.add("o20", "1/216", "FB'U'R'URURUR'U'BF'")
t.add("o21", "2/216", "R'U2RUR'U'RUR'UR")
t.add("o22", "4/216", "RU2R2U'R2U'R2U2R")
t.add("o23", "4/216", "R2D'RU2'R'DRU2'R")
t.add("o24", "4/216", "RBL'B'R'BLB'")
t.add("o25", "4/216", "R'FRB'R'F'RB")
t.add("o26", "4/216", "R'U'RU'R'U2R")
t.add("o27", "4/216", "RUR'URU2R'")
t.add("o28", "4/216", "LF'LF2R'FRF2L2")
t.add("o29", "4/216", "F'U'L'UB'LFL'BL")
t.add("o30", "4/216", "FURU'BR'F'RB'R'")
t.add("o31", "4/216", "R'U'FURU'R'F'R")
t.add("o32", "4/216", "LUF'U'L'ULFL'")
t.add("o33", "4/216", "RUR'U'R'FRF'")
t.add("o34", "4/216", "RUR2U'R'FRURU'F'")
t.add("o35", "4/216", "RU2R2FRF'RU2R'")
t.add("o36", "4/216", "R'U'RU'R'URULwU'R'U")
t.add("o37", "4/216", "FRU'R'U'RUR'F'")
t.add("o38", "4/216", "RUR'URU'R'U'R'FRF'")
t.add("o39", "4/216", "LU'R'F'U'FUL'R")
t.add("o40", "4/216", "R'ULFUF'U'RL'")
t.add("o41", "4/216", "RUR'URU2R'FRUR'U'F'")
t.add("o42", "4/216", "R'U'RU'R'U2RFRUR'U'F'")
t.add("o43", "4/216", "F'U'L'ULF")
t.add("o44", "4/216", "FURU'R'F'")
t.add("o45", "4/216", "FRUR'U'F'")
t.add("o46", "4/216", "R'U'R'FRF'UR")
t.add("o47", "4/216", "F'L'U'LUL'U'LUF")
t.add("o48", "4/216", "FRUR'U'RUR'U'F'")
t.add("o49", "4/216", "RwU'Rw2URw2URw2U'Rw")
t.add("o50", "4/216", "Rw'URw2U'Rw2U'Rw2URw'")
t.add("o51", "4/216", "FwRUR'U'RUR'U'Fw'")
t.add("o52", "4/216", "RUR'URDw'RU'R'F'")
t.add("o53", "4/216", "Rw'U'RU'R'URU'R'U2Rw")
t.add("o54", "4/216", "RwUR'URU'R'URU2Rw'")
t.add("o55", "2/216", "RU2R2U'RU'R'U2FRF'")
t.add("o56", "2/216", "RwURw'URU'R'URU'R'RwU'Rw'")
t.add("o57", "2/216", "RUR'U'M'URU'Rw'")

t.add("p1", "16/288", "R2F2R'B'RF2R'BR'")
t.add("p2", "16/288", "RB'RF2R'BRF2R2")
t.add("p3", "8/288", "RB'R'FRBR'Bw2'R'BRFR'B'R")
t.add("p4", "8/288", "U2M2UM2UM'U2M2U2M'")
t.add("p5", "4/288", "L'R'U2LRFBU2F'B'")
t.add("p6", "16/288", "RU'RURURU'R'U'R2")
t.add("p7", "16/288", "R2URUR'U'R'U'R'UR'")
t.add("p8", "16/288", "LU'R'UL'U2RU'R'U2R")
t.add("p9", "16/288", "R2FwRFw'R2BwR'FRF2")
t.add("p9'", "16/288", "R'ULU'RU2L'ULU2L'")
t.add("p10", "16/288", "RUR'U'R'FR2U'R'U'RUR'F'")
t.add("p11", "16/288", "U'R'U2RU'F'RwUR'U'Rw'FU'R")
t.add("p12", "16/288", "URU2'R'UBRw'U'RURwB'UR'")
t.add("p13", "16/288", "R'URU'R2'F'U'FURU'R2B'R'B")
t.add("p14", "16/288", "R2'Uw'RU'RUR'UwR2'-u-RU'R'")
t.add("p15", "16/288", "R2UwR'-UR'U'-RUw'R2-u'-R'UR")
t.add("p16", "16/288", "R'U'R-u-R2'Uw-R'URU'R-Uw'R2")
t.add("p17", "16/288", "RUR'-u'-'R2Uw'RU'R'UR'UwR2'")
t.add("p18", "16/288", "RU'RDw-RD'RDR2-r-DRD'R'D'")
t.add("p19", "4/288", "LU'RU2L'UR'LU'RU2L'UR'U")
t.add("p20", "4/288", "R'UL'U2RU'LR'UL'U2RU'LU'")
t.add("p21", "16/288", "FRU'R'U'RUR'F'RUR'U'R'FRF'")

t.generate_html("index.html")
